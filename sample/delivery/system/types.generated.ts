/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@{{version}}'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Movie Database
 * Environment: Production
 * Id: da5abe9f-fdad-4168-97cd-b3464be2ccb9
 * 
 * -------------------------------------------------------------------------------
 */

import type { ActorType } from "../types/actor-type.generated.js"
import type { MovieType } from "../types/movie-type.generated.js"

/*
 * Array of all type codenames
 */
export const typeCodenames = ["actor", "movie"] as const

/*
 * Type representing all type codenames
 */
export type TypeCodenames = (typeof typeCodenames)[number]

/*
 * Typeguard for type codename
 */
export function isTypeCodename(value: string | undefined | null): value is TypeCodenames {
	return typeof value === "string" && (typeCodenames as readonly string[]).includes(value)
}

/*
 * Core content type with narrowed types. Use this instead of'IContentItem' for increased type safety.
 */
export type CoreType = ActorType | MovieType

/*
 * Type mapping for codename & type. Can be used for type safe access to type based on the codename of type.
 */
export type CodenameTypeMapping = {
	readonly actor: ActorType
	readonly movie: MovieType
}

/*
 * Helper type that returns type based on the codename of type.
 */
export type CodenameTypeMapper<TTypeCodename extends TypeCodenames> = TTypeCodename extends keyof CodenameTypeMapping
	? CodenameTypeMapping[TTypeCodename]
	: CoreType
