import { describe, expect, it } from 'vitest';
import { getEnvironmentInfoComment, toGuidelinesComment, toSafeComment, wrapComment } from '../../lib/core/comment.utils.js';
import { formatCodeAsync } from '../../lib/format/formatter.js';
import { libMetadata } from '../../lib/meta/metadata.js';

describe(`Comments - wrapComment`, () => {
    it('Text should be wrapped in JS comments', () => {
        expect(wrapComment(`Hello`)).toStrictEqual(`/**Hello*/`);
    });
});

describe(`Comments - toSafeComment`, () => {
    it('Comment should not include certain special characters that would break the comment', () => {
        expect(toSafeComment(`Hello*/`)).toStrictEqual(`Hello`);
        expect(toSafeComment(`/*Hello`)).toStrictEqual(`Hello`);
        expect(toSafeComment(`/*Hello*/`)).toStrictEqual(`Hello`);
    });
});

describe(`Comments - toGuidelinesComment`, () => {
    it('In guidelines all line endings should be replaced with space', () => {
        expect(toGuidelinesComment(`LineA\nLineB\nLineC`)).toStrictEqual(`LineA LineB LineC`);
    });
});

describe(`Comments - getEnvironmentInfoComment`, () => {
    it('Environment comment should be valid and without timestamp', async () => {
        const environment = 'dev';
        const name = 'test';
        const id = '123';

        expect(
            await formatCodeAsync(
                getEnvironmentInfoComment({
                    environmentInfo: {
                        environment: environment,
                        id: id,
                        name: name
                    },
                    timestampDate: undefined
                })
            )
        ).toStrictEqual(
            await formatCodeAsync(
                `
            /** 
            * This file has been auto-generated by '${libMetadata.name}@${libMetadata.version}'.
            * 
            * (c) Kontent.ai
            *  
            * -------------------------------------------------------------------------------
            * 
            * Project: ${name}
            * Environment: ${environment}
            * Id: ${id}
            * 
            * -------------------------------------------------------------------------------
            **/`
            )
        );
    });

    it('Environment comment should be valid and with timestamp', async () => {
        const environment = 'dev';
        const name = 'test';
        const id = '123';

        const date = new Date();

        expect(
            await formatCodeAsync(
                getEnvironmentInfoComment({
                    environmentInfo: {
                        environment: environment,
                        id: id,
                        name: name
                    },
                    timestampDate: date
                })
            )
        ).toStrictEqual(
            await formatCodeAsync(
                `
            /** 
            * This file has been auto-generated by '${libMetadata.name}@${libMetadata.version}'.
            * 
            * (c) Kontent.ai
            *  
            * -------------------------------------------------------------------------------
            * 
            * Project: ${name}
            * Environment: ${environment}
            * Id: ${id}
            * Generated: ${date.toLocaleString()}
            * 
            * -------------------------------------------------------------------------------
            **/`
            )
        );
    });
});
